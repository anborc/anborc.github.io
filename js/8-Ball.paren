(planck.testbed "8 Ball"
  (lambda (testbed)
    (let* ((pl planck)(-Vec2 pl.-Vec2)(-Math pl.-Math)
	    (SPI4 (-Math.sin (/ -Math.-P-I 4)))
	    (SPI3 (-Math.sin (/ -Math.-P-I 3)))
	    (COLORED t)
	    (BLACK (create fill "black" stroke "white"))
	    (WHITE (create fill "white" stroke "black"))
	    (COLORS (array
		      (create fill "#ffdd00" stroke "#000000")
		      (create fill "#ffdd00" stroke "#ffffff")
		      (create fill "#ff3300" stroke "#000000")
		      (create fill "#ff3300" stroke "#ffffff")
		      (create fill "#662200" stroke "#000000")
		      (create fill "#662200" stroke "#ffffff")
		      (create fill "#ff8800" stroke "#000000")
		      (create fill "#ff8800" stroke "#ffffff")
		      (create fill "#00bb11" stroke "#000000")
		      (create fill "#00bb11" stroke "#ffffff")
		      (create fill "#9900ff" stroke "#000000")
		      (create fill "#9900ff" stroke "#ffffff")
		      (create fill "#0077ff" stroke "#000000")
		      (create fill "#0077ff" stroke "#ffffff")))
	    (width 8.00)
	    (height 4.00)
	    (BALL_R 0.12)
	    (POCKET_R 0.2))
      
      (setf testbed.x 0)
      (setf testbed.y 0)
      (setf testbed.width (* width 1.2))
      (setf testbed.height (* height 1.2))
      (setf testbed.ratio 100)
      (setf testbed.mouse-Force -30)
      (setf pl.internal.-Settings.velocity-Threshold 0)
      (let* ((world (pl.-World (create)))
	      (rail-H (array
			(-Vec2 POCKET_R (* height .5))
			(-Vec2 POCKET_R (+ (* height 0.5) POCKET_R))
			(-Vec2 (+ (- (* width 0.5) (/ POCKET_R SPI4)) POCKET_R) (+ (* height 0.5) POCKET_R))
			(-Vec2 (- (* width 0.5) (/ POCKET_R SPI4)) (* height 0.5))))
	      (rail-V (array
			(-Vec2 (* width 0.5) (- (/ POCKET_R SPI4) (* height 0.5)))
			(-Vec2 (+ (* width 0.5) POCKET_R) (* (+ (- (* height 0.5) (/ POCKET_R SPI4)) POCKET_R) -1))
			(-Vec2 (+ (* width 0.5) POCKET_R) (+ (- (* height 0.5) (/ POCKET_R SPI4)) POCKET_R))
			(-Vec2 (* width 0.5) (- (* height 0.5) (/ POCKET_R SPI4)))))
	      (rail-Fix-Def (create friction 0.1 restitution 0.9 userData "rail"))
	      (pocket-Fix-Def (create user-Data "pocket"))
	      (ball-Fix-Def (create friction 0.1 restitution 0.99 density 1 user-Data "ball"))
	      (ball-Body-Def (create linear-Damping 1.5 angular-Damping 1))
	      )
	(chain (world.create-Body) (create-Fixture (pl.-Polygon (rail-V.map (-Vec2.scale-Fn +1 +1))) rail-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Polygon (rail-V.map (-Vec2.scale-Fn -1 +1))) rail-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Polygon (rail-H.map (-Vec2.scale-Fn +1 +1))) rail-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Polygon (rail-H.map (-Vec2.scale-Fn -1 +1))) rail-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Polygon (rail-H.map (-Vec2.scale-Fn +1 -1))) rail-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Polygon (rail-H.map (-Vec2.scale-Fn -1 -1))) rail-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Circle (-vec2 0 (- (* (- height) 0.5) (* POCKET_R 1.5))) POCKET_R) pocket-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Circle (-vec2 0 (+ (* height 0.5) (* POCKET_R 1.5))) POCKET_R) pocket-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Circle (-vec2 (+ (* width 0.5) (* POCKET_R 0.7)) (+ (* height 0.5) (* POCKET_R 0.7))) POCKET_R) pocket-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Circle (-vec2 (+ (* width 0.5) (* POCKET_R 0.7)) (+ (* height 0.5) (* POCKET_R 0.7))) POCKET_R) pocket-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Circle (-vec2 (- (* (- width) 0.5) (* POCKET_R 0.7)) (+ (* height 0.5) (* POCKET_R 0.7))) POCKET_R) pocket-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Circle (-vec2 (+ (* width 0.5) (* POCKET_R 0.7)) (- (* (- height) 0.5) (* POCKET_R 0.7))) POCKET_R) pocket-Fix-Def))
	(chain (world.create-Body) (create-Fixture (pl.-Circle (-vec2 (- (* (- width) 0.5) (* POCKET_R 0.7)) (- (* (- height) 0.5) (* POCKET_R 0.7))) POCKET_R) pocket-Fix-Def))
	(let ((balls (chain (rack BALL_R) (map (-Vec2.translate-Fn (/ width 4) 0)))))
	  (balls.push (create x (/ (- width) 4) y 0))
	  (when COLORED
	    (shuffle-Array COLORS)
	    (dotimes (i COLORS.length)
	      (setf balls[i].render COLORS[i]))
	    (setf balls[14].render balls[4].render)
	    (setf balls[4].render BLACK)
	    (let ((len (- balls.length 1)))(setf balls[len].render WHITE))
	    )
	  (dotimes (i balls.length)
	    (let ((ball (world.create-Dynamic-Body ball-Body-Def)))
	      (ball.setBullet t)
	      (ball.setPosition balls[i])
	      (ball.create-Fixture (pl.-Circle BALL_R) ball-Fix-Def)
	      (setf ball.render balls[i].render)))
	  (world.on "post-solve"
	    (lambda (contact)
	      (let* ((fa (contact.get-Fixture-A))
		      (ba (fa.get-Body))
		      (fb (contact.get-Fixture-B))
		      (bb (fb.getBody))
		      (pocket (equal (fa.get-User-Data) (or (and pocket-Fix-Def.user-Data ba) (fb.get-User-Data)) (and pocket-Fix-Def.user-Data bb)))
		      (ball (equal (fa.get-User-Data) (or (and ball-Fix-Def.user-Data ba) (fb.get-User-Data)) (and ball-Fix-Def.user-Data bb))))
		(setTimeout (lambda () (when (and ball pocket)
					 (world.destroy-Body ball))) 1))))
	  (return world)
	  (defun rack (r)
	    (let* ((n 5)(balls2 (array))(d2 (* r 2))(l (* SPI3 d2)))
	      (dotimes (i n)
		(dotimes (j (+ i 1))
		  (balls2.push (create x (+ (* i l) (-Math.random (* r 0.02))) y (+ (* (- j (* i 0.5)) d2) (-Math.random (* r 0.02)))))))
	      balls2))
	  (defun shuffle-Array (arr)
	    (dotimes (i arr.length)
	      (let* ((i1 (- arr.length i))
		      (j (Math.floor (* (Math.random) (+ i1 1)))) (temp arr[i1]))
		(setf arr[i1] arr[j])
		(setf arr[j] temp)
		))
	    arr)
	  ))))) 
