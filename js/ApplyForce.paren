(planck.testbed "Apply Force"
  (lambda (testbed)
    (setf testbed.y -20)    
    (let* ((pl planck)(-Vec2 pl.-Vec2)
	    (world (pl.-World))
	    (ground (world.create-Body (-Vec2 0.0 20.0)))
	    (wall-F-D (create density 0.0 restitution 0.4)))
      (ground.create-Fixture (pl.-Edge (-Vec2 -20.0 -20.0) (-Vec2 -20.0 20.0)) wall-F-D)
      (ground.create-Fixture (pl.-Edge (-Vec2 20.0 -20.0) (-Vec2 20.0 20.0)) wall-F-D)
      (ground.create-Fixture (pl.-Edge (-Vec2 -20.0 20.0) (-Vec2 20.0 20.0)) wall-F-D)
      (ground.create-Fixture (pl.-Edge (-Vec2 -20.0 -20.0) (-Vec2 20.0 -20.0)) wall-F-D)
      (let ((xf1 (pl.-Transform)) )
	(xf1.q.set (* -Math.-P-I 0.3524))
	(xf1.p.set (xf1.q.get-X-Axis))
	(let* ((poly1 (pl.-Polygon (chain (array (-Vec2 -1.0 0.0) (-Vec2 1.0 0.0) (-Vec2 0.0 0.5)) (map (pl.-Transform.mul-Fn xf1)))))
		(xf2 (pl.-Transform))
		(poly2 (pl.Polygon (chain (array (-Vec2 -1.0 0.0) (-Vec2 1.0 0.0) (-Vec2 0.0 0.5)) (map (pl.-Transform.mul-Fn xf2)))))
		(jet (world.create-Body (create type "dynamic"
					  angular-Damping  2.0
					  linear-Damping  0.5
					  position (-Vec2 0.0 2.0)
					  angle -Math.-P-I
					  allow-Sleep false)))
		(box-F-D (create density 1.0 friction 0.3)))	  
	  (xf2.q.set (* -0.3524 -Math.-P-I))
	  (xf2.p.set (-Vec2.neg (xf2.q.get-X-Axis)))
	  (jet.create-Fixture poly1 2.0)
	  (jet.create-Fixture poly2 2.0)
	  (dotimes (i 10)
	    (let ((box (world.create-Dynamic-Body (-Vec2 0.0 (+ 5.0 (* 1.54 i))))))
	      (box.create-Fixture (pl.-Box 0.5 0.5) box-F-D)
	      (let* ((gravity 10.0) (ii (box.get-Inertia)) (mass (box.get-Mass)) (radius (-Math.sqrt (/ (* 2.0 ii) mass))))
		(world.create-Joint (pl.-Friction-Joint (create collide-Connected t max-Force (* mass gravity) max-Torque (* mass radius gravity)) ground box)))))
	  (setf testbed.step
	    (lambda ()
	      (if (and testbed.active-Keys.right !testbed.active-Keys.left)
		(jet.apply-Angular-Impulse -0.2 t)
		(when (and testbed.active-Keys.left !testbed.active-Keys.right)
		  (jet.apply-Angular-Impulse 0.2 t)))
	      (when testbed.active-Keys.up
		(let ((f (jet.get-World-Vector (-Vec2 0.0 -1.0)))
		       (p (jet.get-World-Point (-Vec2 0.0 2.0))))
		  (jet.apply-Linear-Impulse f p t)))))
	  (return world))))))
