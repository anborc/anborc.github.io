(planck.testbed "Bridge"
  (lambda (testbed)
    (let* ((pl planck)(-Vec2 pl.-Vec2)
	    (world (new (pl.-World (-Vec2 0 -4))))
	    (count 30)
	    (middle null)
	    (ground (world.create-Body))
	    (bridge-Rect (pl.-Box 0.5 0.125))
	    (bridge-F-D (create density 20.0 friction 0.2)))
      (ground.create-Fixture (pl.-Edge (-Vec2 -40.0 0.0) (-Vec2 40.0 0.0) ) 0.0)
      (let ((prev-Body ground))
	(dotimes (i count)
	  (let ((body (world.create-Dynamic-Body (-Vec2 (+ -14.5 i) 5.0)))
		 (anchor (-Vec2 (+ -15.0 i) 5.0)))
	    (body.create-Fixture bridge-Rect bridge-F-D)
	    (world.create-Joint (pl.-Revolute-Joint (create) prev-Body body anchor))
	    (when (equal (* i 2) count) (setf middle body))
	    (setf prev-Body body)
	    )))
      (let ((anchor (-Vec2 (+ -15.0 count) 5.0)))
	(world.create-Joint (pl.-Revolute-Joint (create) prev-Body ground anchor))
	(dotimes (i 2)
	  (let ((body2 (world.create-Dynamic-Body (-Vec2 (- (* i 8.0) 8.0) 12.0)))
		 (vertices (array (-Vec2 -0.5 0.0) (-Vec2 0.5 0.0) (-Vec2 0.0 1.5))))
	    (body2.create-Fixture (pl.-Polygon vertices) 1.0)
	    )))
      (let ((shape (pl.-Circle 0.5)))
	(dotimes (i 30)
	  (let ((body3 (world.create-Dynamic-Body (-Vec2 (- (* i 2.0) 2.0) 10.0))))
	    (body3.create-Fixture shape 1.0))))
      world))) 
